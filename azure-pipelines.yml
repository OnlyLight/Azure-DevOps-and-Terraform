# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger target branch
pr:
  branches:
    include:
    - master
    - develop

resources:
- repo: self

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
# - stage: Build
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: AzureKeyVault@2
#       inputs:
#         azureSubscription: 'Azure DevOps'
#         KeyVaultName: 'kvault-demo-12'
#         SecretsFilter: '*'
#         RunAsPreJob: false
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'Onlylight Docker Hub'
#         repository: $(imageRepository)
#         command: 'buildAndPush'
#         Dockerfile: '**/Dockerfile'
#         tags: |
#           $(tag)
#           latest
- stage: Deploy
  displayName: Deploy to slot
  jobs:
  # - job: Deploy
  #   displayName: Deploy job
  #   steps:
  #   - task: AzureRmWebAppDeployment@4
  #     condition: succeeded()
  #     inputs:
  #       ConnectionType: 'AzureRM'
  #       azureSubscription: 'Azure DevOps'
  #       appType: 'webAppContainer'
  #       WebAppName: 'blazordemo123'
  #       DockerNamespace: 'registry-1.docker.io'
  #       DockerRepository: '$(imageRepository)'
  #       DockerImageTag: '$(tag)'
  - job: SetBuildVariables
    displayName: SetBuildVariables
    steps:
    - task: PowerShell@2
      name: buildVariables
      inputs:
        targetType: 'inline'
        script: |
          $token = "Bearer $env:SYSTEM_ACCESSTOKEN"
          $headers = @{ Authorization = $token }
          Write-Host "Token: $token"
          Write-Host "Headers: $headers"
        
          $baseUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/commits"
          $request = "$baseUrl/$env:RELEASE_ARTIFACTS_$(Build.Repository.Name)_SOURCEVERSION"
          Write-Host "Request: $request"

          $response = Invoke-WebRequest -Uri $request -Headers $headers
          $json = ($response | ConvertFrom-Json)
          $lastCommit = $json.value[0]
          Write-Host "Last Commit: $lastCommit"
          
          $comment = $lastCommit.comment
          Write-Host "Comment: $comment"
          Write-Host "##vso[task.setvariable variable=CommitMessage;isOutput=true]$comment"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  - job: SendEmail
    displayName: SendEmail
    dependsOn: SetBuildVariables
    variables:
      - name: CommitMessage
        value: $[ dependencies.SetBuildVariables.outputs['buildVariables.CommitMessage'] ]
    steps:
    - task: SendGridEmail@2
      condition: and(succeeded(), eq(variables.isMain, 'false'))
      inputs:
        SendGridApiKey: '$(SendGridKey)'
        FromAddress: 'Duy Tran <duyquang130@gmail.com>'
        ToAddresses: 'Duy Tran <duyquangtran@kms-technology.com>, Duy Tran <duyquang130@gmail.com>'
        Subject: '$(Build.DefinitionName) Finished Successfully'
        emailBodyFormat: 'InLine'
        EmailBody: '<h4>SourceVersionMessage $(CommitMessage)</h4>'
        sendAsHtml: true